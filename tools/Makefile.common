.PHONY: userDockerCommand userScript build deploy clean

fake:
	@echo "Interesting..."

# xXxx means do Xxx without build

build: userScriptLast userDockerCommandLast
	@echo "==> Building docker ..."
	daoker.py \
		--ms-name=$(msName) \
		--ms-vern=$(msVern) \
		--ms-port=$(msPort) \
		--ms-desc=$(msDesc) \
		--ms-upstream=$(msUpstream) \
		--ms-kind=$(msKind) \
		--msa-base=$(msaBase)
	@echo "==> Building docker ... DONE"


# 把已经生成的镜像打包成压缩包
xdockerpack:
	@echo
	@echo
	@echo ">>>>>>>>>>>>> xdockerpack <<<<<<<<<<<<<"
	sudo docker save -o one.tar ${msName}
	sudo tar czvf one.tar.gz one.tar
	sudo chmod a+rwx one.tar.gz
	@echo "<<<<<<<<<<<<< xdockerpack >>>>>>>>>>>>>"
	@echo
	@echo


# 远程重新加载服务
xremotereloadms:
	@echo
	@echo
	@echo ">>>> /tmp/.mkREMOTE"
	@cat /tmp/.mkREMOTE
	@echo ">>>> /tmp/.msbName"
	@cat /tmp/.msbName
	@echo ">>>> /tmp/.msSUFFIX"
	@cat /tmp/.msSUFFIX
	@echo ">>>>>>>>>>>>> xremoteloadms <<<<<<<<<<<<<"
	( \
		touch /tmp/.dockerRunPara /tmp/.mkREMOTE /tmp/.mkCONFIG /tmp/.msbName /tmp/.msSUFFIX; \
		export dockerRunPara="`cat /tmp/.dockerRunPara`"; \
		export mkREMOTE="`cat /tmp/.mkREMOTE`"; \
		export msbName="`cat /tmp/.msbName`"; \
		export msSUFFIX="`cat /tmp/.msSUFFIX`"; \
		ssh $${mkREMOTE} -p50000 "mscontainer.sh -b -k --runopt=\"$${dockerRunPara}\" --msbName=$${msbName} ${msName}"; \
	)
	@echo "<<<<<<<<<<<<< xremoteloadms >>>>>>>>>>>>>"
	@echo
	@echo


# 远程重新加载镜像并启动容器
xremoteloadms:
	@echo
	@echo
	@echo ">>>> /tmp/.mkREMOTE"
	@cat /tmp/.mkREMOTE
	@echo ">>>> /tmp/.msbName"
	@cat /tmp/.msbName
	@echo ">>>> /tmp/.msSUFFIX"
	@cat /tmp/.msSUFFIX
	@echo ">>>>>>>>>>>>> xremoteloadms <<<<<<<<<<<<<"
	( \
		touch /tmp/.dockerRunPara /tmp/.mkREMOTE /tmp/.mkCONFIG /tmp/.msbName /tmp/.msSUFFIX; \
		export dockerRunPara="`cat /tmp/.dockerRunPara`"; \
		export mkREMOTE="`cat /tmp/.mkREMOTE`"; \
		export msbName="`cat /tmp/.msbName`"; \
		export msSUFFIX="`cat /tmp/.msSUFFIX`"; \
		scp -P50000 one.tar.gz $${mkREMOTE}:/tmp ; \
		ssh $${mkREMOTE} -p50000 "cd /tmp; tar xvf /tmp/one.tar.gz; docker load -i /tmp/one.tar; mscontainer.sh -b -k --runopt=\"$${dockerRunPara}\" --msbName=$${msbName} ${msName}"; \
	)
	@echo "<<<<<<<<<<<<< xremoteloadms >>>>>>>>>>>>>"
	@echo
	@echo


# 远程大全套：编译、打包、上传、加载、启动
remotedeploy: build xdockerpack xremoteloadms


# 本地启动服务
xlocaldeploy: 
	@echo
	@echo
	@echo ">>>>>>>>>>>>> xlocaldeploy <<<<<<<<<<<<<"
	( \
		touch /tmp/.dockerRunPara /tmp/.mkREMOTE /tmp/.mkCONFIG /tmp/.msbName /tmp/.msSUFFIX; \
		export dockerRunPara="`cat /tmp/.dockerRunPara`"; \
		export msbName="`cat /tmp/.msbName`"; \
		export msSUFFIX="`cat /tmp/.msSUFFIX`"; \
		mscontainer.sh -b -k --runopt=\"$${dockerRunPara}\" --msbName=$${msbName} --suffix=$${msSUFFIX} ${msName}; \
	)
	@echo "<<<<<<<<<<<<< xlocaldeploy >>>>>>>>>>>>>"
	@echo
	@echo

vet:
	@go vet


clean:
	@echo "==> Cleanup ..."
	@rm /tmp/.dockerRunPara /tmp/.mkREMOTE /tmp/.mkCONFIG /tmp/.msbName /tmp/.msSUFFIX
	@rm -fr Dockerfile
	@rm -fr .userScript
	@rm -fr .userDockerCommand
	@rm -fr *.tar *.tar.gz
	@rm -fr main
	@rm -fr ms
	@echo "==> Cleanup ... DONE"


userScriptFirst:
	@echo "TODO: Load settings from $$C"
	@echo "==> Writing userScript..."
	@echo > .userScript -n


userScriptLast: userScript
	$(call sss, "[ -f msa.cfg ] && cp -fv msa.cfg ms/msa.cfg || echo -n")
	@echo "==> Writing userScript... DONE"


userDockerCommandFirst:
	@echo "==> Writing userDockerCommand..."
	@echo > .userDockerCommand -n
	@echo >> .userDockerCommand "ENV KCFG_FILES /root/msa.cfg:/root/main.cfg"


userDockerCommandLast: userDockerCommand
	@echo "==> Writing userDockerCommand... DONE"


# appendline fileName line
define append
	echo >> $(1) $(2)
endef

# append line to .userScript
define sss
	echo >> .userScript $(1)
endef

# append line to .userDockerCommand
define ddd
	echo >> .userDockerCommand $(1)
endef
